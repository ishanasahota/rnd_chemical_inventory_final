import os
from datetime import datetime, timedelta
from openpyxl import load_workbook

# Configuration
EXCEL_FILE = "rnd_chemical_inventory.xlsx"
INVENTORY_SHEET = "InventoryData"
REORDER_SHEET = "ReorderUpdates"  
DELETED_SHEET = "DeletedItems"
DAYS_AFTER_EXPIRY = 30

from datetime import datetime
from openpyxl.utils.datetime import from_excel

from datetime import datetime
from openpyxl.utils.datetime import from_excel

def correct_common_typos(date_str):
    corrections = {
        "septemeber": "september",
        # Add more if needed
    }
    lowered = date_str.lower()
    for typo, correct in corrections.items():
        if typo in lowered:
            lowered = lowered.replace(typo, correct)
    return lowered

def parse_date(date_input):
    """Parse date from various formats including datetime, strings, Excel serials."""
    if not date_input:
        return None

    # Already datetime?
    if isinstance(date_input, datetime):
        return date_input

    # Excel serials
    try:
        if isinstance(date_input, (int, float)):
            if 0 < date_input < 60000:
                return from_excel(date_input)
            else:
                return None
    except Exception:
        pass

    # Handle string-based dates
    try:
        date_str = str(date_input).strip()

        if date_str.lower() in {"n/a", "n?a", "na", ""}:
            return None

        date_str = correct_common_typos(date_str)

        for fmt in [
            "%Y-%m-%d %H:%M:%S",
            "%Y-%m-%d",
            "%m/%d/%Y",
            "%B %d, %Y",
            "%b %d, %Y",
            "%B %Y",
        ]:
            try:
                return datetime.strptime(date_str, fmt)
            except ValueError:
                continue

        print(f"Warning: Could not parse date '{date_str}', skipping this item")
        return None

    except Exception as e:
        print(f"Error parsing date '{date_input}': {e}")
        return None



def should_delete_item(row, headers, cutoff_date):
    """Check if an item should be deleted based on expiry date and quantity"""
    
    # Check remaining quantity (if 0, and it's been 30 days, delete)
    qty_col = headers.get("Remaining Quantity")
    if qty_col is not None:
        try:
            remaining_qty = float(row[qty_col].value or 0)
            if remaining_qty <= 0:
                return True  # Delete if quantity is 0 or less
        except (ValueError, TypeError):
            pass
    
    # Check expiry date
    expiry_col = headers.get("Expiry Date")
    if expiry_col is not None:
        expiry_date = parse_date(row[expiry_col].value)
        if expiry_date and expiry_date < cutoff_date:
            return True  # Delete if expired for more than 30 days
    
    return False

def find_matching_reorder_row(inventory_row, reorder_ws, inventory_headers, reorder_headers):
    """Find the corresponding row in ReorderUpdates sheet"""
    
    # Get the 4 columns that are copied from InventoryData to ReorderUpdates
    # Assuming these are: Chemical Name, Lot Number, Remaining Quantity, Expiry Date
    search_columns = ["Chemical Name", "Bottle Nominal Value (L)", "Remaining Quantity", "Expiry Date"]
    
    inventory_values = {}
    for col_name in search_columns:
        col_idx = inventory_headers.get(col_name)
        if col_idx is not None:
            inventory_values[col_name] = inventory_row[col_idx].value
    
    # Search for matching row in ReorderUpdates
    for row_idx, reorder_row in enumerate(reorder_ws.iter_rows(min_row=2), start=2):
        match = True
        for col_name in search_columns:
            reorder_col_idx = reorder_headers.get(col_name)
            if reorder_col_idx is not None:
                if reorder_row[reorder_col_idx].value != inventory_values.get(col_name):
                    match = False
                    break
        
        if match:
            return row_idx
    
    return None

def auto_delete_expired_empty():
    """Main function to auto-delete expired/empty items"""
    
    if not os.path.exists(EXCEL_FILE):
        print(f"Excel file '{EXCEL_FILE}' not found!")
        return
    
    # Load workbook
    wb = load_workbook(EXCEL_FILE)
    
    # Check if required sheets exist
    if INVENTORY_SHEET not in wb.sheetnames:
        print(f"Sheet '{INVENTORY_SHEET}' not found!")
        return
    
    if REORDER_SHEET not in wb.sheetnames:
        print(f"Sheet '{REORDER_SHEET}' not found!")
        return
    
    # Create DeletedItems sheet if it doesn't exist
    if DELETED_SHEET not in wb.sheetnames:
        deleted_ws = wb.create_sheet(DELETED_SHEET)
        # Copy headers from InventoryData
        inventory_ws = wb[INVENTORY_SHEET]
        headers_row = [cell.value for cell in inventory_ws[1]]
        headers_row.append("Deletion Date")  # Add deletion timestamp
        deleted_ws.append(headers_row)
    else:
        deleted_ws = wb[DELETED_SHEET]
    
    inventory_ws = wb[INVENTORY_SHEET]
    reorder_ws = wb[REORDER_SHEET]
    
    # Get headers
    inventory_headers = {cell.value: idx for idx, cell in enumerate(inventory_ws[1])}
    reorder_headers = {cell.value: idx for idx, cell in enumerate(reorder_ws[1])}
    
    # Calculate cutoff date (30 days ago)
    cutoff_date = datetime.now() - timedelta(days=DAYS_AFTER_EXPIRY)
    
    # Collect rows to delete (process in reverse to avoid index issues)
    rows_to_delete = []
    reorder_rows_to_delete = []
    
    for row_idx, row in enumerate(inventory_ws.iter_rows(min_row=2), start=2):
        if should_delete_item(row, inventory_headers, cutoff_date):
            # Find corresponding row in ReorderUpdates
            reorder_row_idx = find_matching_reorder_row(row, reorder_ws, inventory_headers, reorder_headers)
            
            rows_to_delete.append((row_idx, row))
            if reorder_row_idx:
                reorder_rows_to_delete.append(reorder_row_idx)
    
    # Process deletions in reverse order to maintain row indices
    deleted_count = 0
    
    for row_idx, row in reversed(rows_to_delete):
        # Copy row to DeletedItems with timestamp
        row_data = [cell.value for cell in row]
        row_data.append(datetime.now().strftime("%Y-%m-%d %H:%M:%S"))
        deleted_ws.append(row_data)
        
        # Delete from InventoryData
        inventory_ws.delete_rows(row_idx)
        deleted_count += 1
    
    # Delete corresponding rows from ReorderUpdates
    for reorder_row_idx in reversed(sorted(reorder_rows_to_delete)):
        reorder_ws.delete_rows(reorder_row_idx)
    
    # Save changes
    wb.save(EXCEL_FILE)
    
    print(f"Auto-deletion complete!")
    print(f"Moved {deleted_count} expired/empty items to '{DELETED_SHEET}' sheet")
    print(f"Removed {len(reorder_rows_to_delete)} corresponding alert rows from '{REORDER_SHEET}' sheet")

if __name__ == "__main__":
    auto_delete_expired_empty()
