import tkinter as tk
from tkinter import messagebox
from openpyxl import load_workbook
import os
from datetime import datetime

EXCEL_FILE = "/Users/ishanasahota/Desktop/fluidAI/rnd_inventory_data_2.xlsx"
ORDER_TRACKING_SHEET = "OrderTracking"
DELETED_ITEMS_SHEET = "DeletedItems"


def cleanup_expired_orders():
    """Move expired order tracking entries to DeletedItems sheet"""
    try:
        if not os.path.exists(EXCEL_FILE):
            messagebox.showerror("Error", f"Inventory file {EXCEL_FILE} not found")
            return False

        wb = load_workbook(EXCEL_FILE)

        # Check if OrderTracking sheet exists
        if ORDER_TRACKING_SHEET not in wb.sheetnames:
            messagebox.showinfo("No Action", f"No {ORDER_TRACKING_SHEET} sheet found")
            return False

        order_ws = wb[ORDER_TRACKING_SHEET]

        # Create DeletedItems sheet if it doesn't exist
        if DELETED_ITEMS_SHEET not in wb.sheetnames:
            deleted_ws = wb.create_sheet(DELETED_ITEMS_SHEET)
            # Add headers to match OrderTracking + deletion date
            deleted_ws.append([
                "Barcode ID", "Order Date", "Expected Delivery", "Order Status",
                "Manufacturer", "Lead Time Days", "Auto Delete Date", "Date Deleted"
            ])
        else:
            deleted_ws = wb[DELETED_ITEMS_SHEET]

        # Build header mapping for OrderTracking
        headers = {}
        for idx, cell in enumerate(order_ws[1]):
            if cell.value:
                headers[cell.value] = idx

        # Get today's date
        today = datetime.now().date()

        # Track what we're moving
        expired_rows = []
        rows_to_delete = []

        # Check each row in OrderTracking
        for row_num, row in enumerate(order_ws.iter_rows(min_row=2), start=2):
            auto_delete_date = row[headers.get("Auto Delete Date", 6)].value

            if auto_delete_date:
                try:
                    # Handle different date formats
                    if isinstance(auto_delete_date, str):
                        delete_date = datetime.strptime(auto_delete_date, "%Y-%m-%d").date()
                    else:
                        delete_date = auto_delete_date.date() if hasattr(auto_delete_date, 'date') else auto_delete_date

                    # Check if it's time to delete
                    if delete_date <= today:
                        # Collect row data
                        row_data = []
                        for cell in row:
                            row_data.append(cell.value)

                        # Add deletion date
                        row_data.append(today.strftime("%Y-%m-%d"))

                        expired_rows.append({
                            'row_num': row_num,
                            'data': row_data,
                            'barcode': row[headers.get("Barcode ID", 0)].value,
                            'chemical': "Unknown"  # We don't have chemical name in order tracking
                        })

                        rows_to_delete.append(row_num)

                except (ValueError, TypeError, AttributeError) as e:
                    print(f"Error parsing date for row {row_num}: {e}")
                    continue

        if not expired_rows:
            messagebox.showinfo("No Action", "No expired order tracking entries found for today")
            return True

        # Show confirmation dialog
        confirm_msg = f"Found {len(expired_rows)} expired order tracking entries:\n\n"
        for item in expired_rows[:5]:  # Show first 5
            confirm_msg += f"• {item['barcode']}\n"
        if len(expired_rows) > 5:
            confirm_msg += f"• ... and {len(expired_rows) - 5} more\n"
        confirm_msg += f"\nMove these to '{DELETED_ITEMS_SHEET}' sheet?"

        if not messagebox.askyesno("Confirm Cleanup", confirm_msg):
            return False

        # Move expired entries to DeletedItems sheet
        for item in expired_rows:
            deleted_ws.append(item['data'])

        # Delete rows from OrderTracking (in reverse order to maintain indices)
        for row_num in sorted(rows_to_delete, reverse=True):
            order_ws.delete_rows(row_num)

        # Save the workbook
        wb.save(EXCEL_FILE)
        wb.close()

        # Show success message
        success_msg = f"✅ Cleanup Complete!\n\n"
        success_msg += f"Moved {len(expired_rows)} expired entries to '{DELETED_ITEMS_SHEET}'\n"
        success_msg += f"Removed {len(rows_to_delete)} rows from '{ORDER_TRACKING_SHEET}'"

        messagebox.showinfo("Success", success_msg)
        return True

    except Exception as e:
        messagebox.showerror("Error", f"Error during cleanup: {str(e)}")
        return False


def main():
    """Main function to run the order cleanup"""
    # Hide the main tkinter window
    root = tk.Tk()
    root.withdraw()

    try:
        print("Starting order tracking cleanup...")
        success = cleanup_expired_orders()

        if success:
            print("Order cleanup completed successfully!")
        else:
            print("Order cleanup completed with issues")

    except Exception as e:
        print(f"Error in main: {e}")
        messagebox.showerror("System Error", f"An unexpected error occurred: {str(e)}")

    finally:
        root.destroy()


if __name__ == "__main__":
    main()
