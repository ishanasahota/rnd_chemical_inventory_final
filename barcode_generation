import qrcode
import os
import uuid
import shutil
import random
import string
from PIL import Image, ImageDraw, ImageFont
from openpyxl import load_workbook, Workbook

EXCEL_FILE = "rnd_inventory_data_2.xlsx"
GENERATED_SHEET = "GeneratedBarcodes"

# Auto-clear barcode_images folder to prevent duplicates
output_folder = "barcode_images"
if os.path.exists(output_folder):
    shutil.rmtree(output_folder)  # Remove entire folder
os.makedirs(output_folder, exist_ok=True)  # Recreate it empty


def generate_unique_barcode_id(existing_ids):
    """
    Generate unique barcode using random alphanumeric characters.
    Logic: 8 characters using uppercase letters and digits for better scanability
    Format: 4 letters + 4 digits (e.g., ABCD1234)
    This provides 26^4 * 10^4 = 4.56 million unique combinations
    """
    max_attempts = 10000
    attempts = 0

    while attempts < max_attempts:
        # Generate 4 random uppercase letters + 4 random digits
        letters = ''.join(random.choices(string.ascii_uppercase, k=4))
        digits = ''.join(random.choices(string.digits, k=4))
        barcode_id = letters + digits

        # Check if this ID has been used before
        if barcode_id not in existing_ids:
            return barcode_id

        attempts += 1

    # Fallback to UUID if we somehow can't generate unique ID
    print("Warning: Using UUID fallback for unique ID generation")
    return str(uuid.uuid4())[:8].upper()


def check_barcode_exists(barcode_id, existing_ids):
    """Check if barcode has been used before"""
    return barcode_id in existing_ids


# Ensure Excel file and GeneratedBarcodes sheet exist
if not os.path.exists(EXCEL_FILE):
    wb = Workbook()
    ws = wb.active
    ws.title = GENERATED_SHEET
    ws.append(["Barcode ID", "Date Generated", "Status"])
    wb.save(EXCEL_FILE)

wb = load_workbook(EXCEL_FILE)
if GENERATED_SHEET not in wb.sheetnames:
    ws = wb.create_sheet(GENERATED_SHEET)
    ws.append(["Barcode ID", "Date Generated", "Status"])
    wb.save(EXCEL_FILE)

ws = wb[GENERATED_SHEET]

# Load existing barcode IDs and check for duplicates
existing_ids = set()
duplicate_count = 0

for row in ws.iter_rows(min_row=2):
    if row[0].value:
        barcode_id = str(row[0].value).strip()
        if barcode_id in existing_ids:
            duplicate_count += 1
            print(f"Warning: Duplicate barcode found: {barcode_id}")
        existing_ids.add(barcode_id)

if duplicate_count > 0:
    print(f"Found {duplicate_count} duplicate barcodes in existing data")

print(f"Loaded {len(existing_ids)} existing barcode IDs")
print("Barcode Generation Logic:")
print("- Character set: A-Z (26) + 0-9 (10)")
print(f"- Current usage: {len(existing_ids)}/{4569760} ({len(existing_ids) / 45697.6:.2f}%)")

# Generate new unique barcodes
# Generate new unique barcodes
new_ids = []
generation_count = 105

print(f"\nGenerating {generation_count} new unique barcodes...")
for i in range(generation_count):
    barcode_id = generate_unique_barcode_id(existing_ids)

    # Double-check uniqueness (redundant but safe)
    if check_barcode_exists(barcode_id, existing_ids):
        print(f"Error: Generated duplicate barcode {barcode_id}")
        continue

    existing_ids.add(barcode_id)
    new_ids.append(barcode_id)

    # Create QR code containing only the barcode ID
    img = qrcode.make(barcode_id)
    filename = f"{barcode_id}.png"
    img.save(os.path.join(output_folder, filename))

    if (i + 1) % 25 == 0:  # Progress indicator
        print(f"Generated {i + 1}/{generation_count} barcodes...")

    # === DUPLICATE CLEANUP STEP ===
    print(f"\nPerforming final duplicate check on {len(new_ids)} generated barcodes...")

    # Remove any duplicates within the new_ids list itself
    original_count = len(new_ids)
    new_ids = list(set(new_ids))  # Convert to set and back to list to remove duplicates
    final_count = len(new_ids)

    if original_count != final_count:
        print(f" Removed {original_count - final_count} internal duplicates from new batch")
    else:
        print(" No internal duplicates found in new batch")

    # Also clean up any image files for removed duplicates
    if original_count != final_count:
        print(" Cleaning up duplicate image files...")
        # Get list of files that should exist
        valid_files = {f"{barcode_id}.png" for barcode_id in new_ids}

        # Remove any extra files
        for filename in os.listdir(output_folder):
            if filename.endswith(".png") and filename not in valid_files:
                os.remove(os.path.join(output_folder, filename))
                print(f"   Removed duplicate image: {filename}")

    print(f"Final count for PDF: {len(new_ids)} unique barcodes")

# Add current date for tracking
from datetime import datetime

current_date = datetime.now().strftime("%Y-%m-%d")

# Append new barcode IDs to the sheet with generation date
for barcode_id in new_ids:
    ws.append([barcode_id, current_date, "Generated"])

wb.save(EXCEL_FILE)

print(f"\nSuccessfully generated {len(new_ids)} new unique barcodes in '{output_folder}' folder.")
print(f"All barcode IDs logged in {EXCEL_FILE} -> {GENERATED_SHEET} sheet")

# === Create printable QR sheet ===
input_folder = "barcode_images"
output_file = "barcode_sheet.pdf"

# Sticker layout settings
dpi = 300
page_width_in, page_height_in = 8.5, 11  # Letter size
margin_in = 0.5  # 1/2 inch margin
left_margin = 150  # shift right (increase)

cols, rows = 3, 7

page_width = int(page_width_in * dpi)
page_height = int(page_height_in * dpi)
margin = int(margin_in * dpi)
margin_y = int(0.145 * dpi)

usable_width = page_width - 2 * margin
usable_height = page_height - 2 * margin

label_width = usable_width // cols
label_height = usable_height // rows

files = [f for f in os.listdir(input_folder) if f.endswith(".png")]
files.sort()

pages = []
for i in range(0, len(files), cols * rows):
    chunk = files[i:i + cols * rows]
    page = Image.new("RGB", (page_width, page_height), "white")

    for idx, filename in enumerate(chunk):
        col = idx % cols
        row = idx // cols

        x = left_margin + col * (label_width + margin)
        y = margin + row * (label_height + margin_y)

        img = Image.open(os.path.join(input_folder, filename))
        img.thumbnail((label_width, label_height), Image.Resampling.LANCZOS)

        page.paste(img, (x, y))

        # Draw label
        draw = ImageDraw.Draw(page)
        label_text = filename.replace(".png", "")
        label_font = ImageFont.load_default()
        bbox = draw.textbbox((0, 0), label_text, font=label_font)
        text_width = bbox[2] - bbox[0]
        text_height = bbox[3] - bbox[1]

        draw.text((x + (label_width - text_width) // 2, y + label_height - 25),
                  label_text, fill="black", font=label_font)

    pages.append(page)

# Save all pages to PDF
if pages:
    pages[0].save(output_file, save_all=True, append_images=pages[1:], resolution=dpi)

print(f"Saved printable PDF to: {output_file}")
print(f"\nBarcode generation complete! Summary:")
print(f"- Uniqueness: Checked against {len(existing_ids)} existing codes")
print(f"- Total generated: {len(new_ids)} new barcodes")
print(f"- Files: Images in '{output_folder}/', PDF: '{output_file}'")
