import tkinter as tk
from tkinter import simpledialog, messagebox
from openpyxl import load_workbook, Workbook
import os

EXCEL_FILE = "rnd_chemical_inventory.xlsx"
INVENTORY_SHEET = "InventoryData"

def initialize_excel_file():
    """Initialize Excel file and sheet if they don't exist"""
    if not os.path.exists(EXCEL_FILE):
        wb = Workbook()
        ws = wb.active
        ws.title = INVENTORY_SHEET
        ws.append(["Barcode ID", "Chemical Name", "Lot Number", "Bottle Nominal Volume (L)", "Remaining Quantity", "Manufacturer", "Expiry Date"])
        wb.save(EXCEL_FILE)
        return

    # Check if sheet exists in existing file
    wb = load_workbook(EXCEL_FILE)
    if INVENTORY_SHEET not in wb.sheetnames:
        ws = wb.create_sheet(INVENTORY_SHEET)
        ws.append(["Barcode ID", "Chemical Name", "Lot Number", "Bottle Nominal Volume (L)", "Remaining Quantity", "Manufacturer", "Expiry Date"])
        wb.save(EXCEL_FILE)

def prompt_for_info(barcode_id):
    """Prompt the user for chemical information"""
    try:
        # Create a temporary root for the dialogs if one doesn't exist
        root = tk.Tk()
        root.withdraw()
        
        chem_name = simpledialog.askstring("Input", f"Chemical Name for barcode {barcode_id}:")
        if chem_name is None:
            return None
            
        lot = simpledialog.askstring("Input", "Lot Number:")
        if lot is None:
            return None
            
        volume = simpledialog.askfloat("Input", "Bottle Nominal Volume (L):")
        if volume is None:
            return None
            
        manufacturer = simpledialog.askstring("Input", "Manufacturer:")
        if manufacturer is None:
            return None
            
        expiry = simpledialog.askstring("Input", "Expiry Date (Write Out M DD, YYYY):")
        if expiry is None:
            return None
            
        return {
            "barcode_id": barcode_id,
            "chemical_name": chem_name,
            "lot": lot,
            "volume": volume,
            "remaining": volume,  # Initially, remaining = full volume
            "manufacturer": manufacturer,
            "expiry": expiry
        }
    except Exception as e:
        messagebox.showerror("Error", f"Error getting input: {str(e)}")
        return None

def update_inventory(barcode_id):
    """Update inventory based on scanned barcode"""
    try:
        wb = load_workbook(EXCEL_FILE)
        ws = wb[INVENTORY_SHEET]
        
        headers = {}
        for idx, cell in enumerate(ws[1]):
            if cell.value:
                headers[cell.value] = idx
        
        # Check if required columns exist
        if "Barcode ID" not in headers or "Remaining Quantity" not in headers:
            messagebox.showerror("Error", "Required columns missing from Excel sheet")
            return
            
        id_col = headers["Barcode ID"]
        qty_col = headers["Remaining Quantity"]
        
        # Look for existing barcode
        for row_num, row in enumerate(ws.iter_rows(min_row=2), start=2):
            if row[id_col].value and str(row[id_col].value).strip() == barcode_id.strip():
                # Existing barcode found - ask for usage
                try:
                    current_qty = float(row[qty_col].value) if row[qty_col].value else 0
                except (ValueError, TypeError):
                    current_qty = 0
                    
                remaining = simpledialog.askfloat("Usage Update", 
                    f"Barcode: {barcode_id}\nHow much is left in the bottle?\nCurrent quantity: {current_qty} L")
                
                if remaining is not None and remaining >= 0:
                    row[qty_col].value = remaining
                    wb.save(EXCEL_FILE)
                    messagebox.showinfo("Updated", f"Updated remaining quantity to {remaining} L")
                return
        
        # Barcode not found, add new entry
        info = prompt_for_info(barcode_id)
        if info is None:
            messagebox.showinfo("Cancelled", "Entry cancelled, returning to scan screen.")
            return
            
        new_row = [
            info["barcode_id"],
            info["chemical_name"],
            info["lot"],
            info["volume"],
            info["remaining"],
            info["manufacturer"],
            info["expiry"]
        ]
        
        ws.append(new_row)
        wb.save(EXCEL_FILE)
        messagebox.showinfo("New Bottle", f"New bottle info saved for barcode {barcode_id}")
        
    except Exception as e:
        messagebox.showerror("Error", f"Error updating inventory: {str(e)}")

def scan_loop():
    """Main scanning loop"""
    root = tk.Tk()
    root.withdraw()
    root.attributes('-topmost', True)  # Keep dialogs on top
    
    try:
        while True:
            barcode_id = simpledialog.askstring("Barcode Scanner", 
                "Scan barcode or enter ID manually:\n(Leave empty and click OK to exit)")
            
            if not barcode_id:
                if messagebox.askyesno("Quit", "Exit scanning application?"):
                    break
                continue
                
            # Clean up the barcode ID
            barcode_id = barcode_id.strip()
            if barcode_id:
                update_inventory(barcode_id)
                
    except Exception as e:
        messagebox.showerror("Error", f"Unexpected error: {str(e)}")
    finally:
        root.destroy()

if __name__ == "__main__":
    initialize_excel_file()
    scan_loop()
